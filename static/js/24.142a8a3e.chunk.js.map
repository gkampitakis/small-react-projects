{"version":3,"sources":["projects/accordion/components/Question.tsx","projects/accordion/components/Question.spec.tsx"],"names":["Question","data","useState","show","setShow","className","title","onClick","data-testid","info","describe","it","tree","renderer","create","toJSON","expect","toMatchSnapshot","baseElement","render","userEvent","click","screen","getByTestId"],"mappings":"yNAUe,SAASA,EAAT,GAAqE,IAAhDC,EAA+C,EAA/CA,KAA+C,EACzDC,oBAAS,GADgD,mBAC1EC,EAD0E,KACpEC,EADoE,KAGjF,OACE,0BAASC,UAAU,WAAnB,UACE,mCACE,6BAAKJ,EAAKK,QACV,wBAAQD,UAAU,MAAME,QAAS,kBAAMH,GAASD,IAAOK,cAAY,WAAnE,SACGL,EAAO,cAAC,IAAD,IAAc,cAAC,IAAD,SAGxBA,GAAQ,4BAAIF,EAAKQ,Y,8GCdzBC,SAAS,YAAY,WACnBC,GAAG,2BAA2B,WAC5B,IAAMC,EAAOC,IACVC,OAAO,cAAC,UAAD,CAAUb,KAAM,CAAEQ,KAAM,WAAYH,MAAO,gBAClDS,SAEHC,OAAOJ,GAAMK,qBAGfN,GAAG,oBAAoB,WAAO,IACpBO,EAAgBC,YAAO,cAAC,UAAD,CAAUlB,KAAM,CAAEQ,KAAM,WAAYH,MAAO,gBAAlEY,YAERE,IAAUC,MAAMC,IAAOC,YAAY,aAEnCP,OAAOE,GAAaD","file":"static/js/24.142a8a3e.chunk.js","sourcesContent":["import React, { ReactElement, useState } from 'react';\nimport { FaPlus, FaMinus } from 'react-icons/fa'\n\n\ninterface QuestionProps {\n  info: string;\n  title: string;\n}\n\n\nexport default function Question ({ data }: { data: QuestionProps }): ReactElement {\n  const [show, setShow] = useState(false);\n\n  return (\n    <article className=\"question\">\n      <header>\n        <h4>{data.title}</h4>\n        <button className=\"btn\" onClick={() => setShow(!show)} data-testid='show-btn'>\n          {show ? <FaMinus /> : <FaPlus />}\n        </button>\n      </header>\n      { show && <p>{data.info}</p>}\n    </article>\n  );\n}\n","import React from 'react';\nimport renderer from 'react-test-renderer';\nimport userEvent from '@testing-library/user-event';\nimport { render, screen } from '@testing-library/react';\nimport Question from './Question';\n\n\ndescribe('Question', () => {\n  it('should render correctly', () => {\n    const tree = renderer\n      .create(<Question data={{ info: 'mockInfo', title: 'mockTitle' }} />)\n      .toJSON();\n\n    expect(tree).toMatchSnapshot();\n  });\n\n  it('Should show info', () => {\n    const { baseElement } = render(<Question data={{ info: 'mockInfo', title: 'mockTitle' }} />);\n\n    userEvent.click(screen.getByTestId('show-btn'));\n\n    expect(baseElement).toMatchSnapshot();\n  });\n});\n"],"sourceRoot":""}